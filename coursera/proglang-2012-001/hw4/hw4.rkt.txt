#lang racket

(provide (all-defined-out)) ;; so we can put tests in a second file

;; pur your code below

;; problem 1
(define (sequence low high stride)
  (if (<= low high) 
    (cons low (sequence (+ low stride) high stride))
    null))

;; problem 2
(define (string-append-map xs suffix)
  (map (lambda (s) (string-append s suffix)) xs))

;; problem 3
(define (list-nth-mod lst n)
    (cond
      [(< n 0) (error "list-nth-mod: negative number")]
      [(null? lst) (error "list-nth-mod: empty list")]
      [(= (remainder n (length lst)) 0) (car lst)]
      [#t (list-nth-mod (cdr lst) (- (remainder n (length lst)) 1))]))

;; problem 4
(define (stream-for-n-steps s n)
  (if (> n 0) 
    (let ([pr (s)])
      (cons (car pr) (stream-for-n-steps (cdr pr) (- n 1))))
    null))

;; problem 5
(define (funny-number-stream)
  (letrec ([f (lambda (x) 
		(cons (if (= 0 (remainder x 5)) (- 0 x) x)
		      (lambda () (f (+ x 1)))))])
    (f 1)))

;; problem 6
(define (dan-then-dog)
  (letrec ([pr (cons "dan.jpg" "dog.jpg")]
	   [f (lambda (x) (cons ((if (= x 0) car cdr) pr) 
				(lambda () (f (- 1 x)))))])
    (f 0)))

;; problem 7
(define (stream-add-zero s)
  (letrec ([f (lambda (x) 
		(let ([pr (x)]) 
		  (cons (cons 0 (car pr)) 
			(lambda () (f (cdr pr))))))])
    (lambda () (f s))))

;; problem 8
(define (cycle-lists xs ys)
  (letrec ([f (lambda (n)
		(cons (cons (list-nth-mod xs n) (list-nth-mod ys n))
		      (lambda () (f (+ n 1)))))])
    (lambda () (f 0))))

;; problem 9
(define (vector-assoc v vec)
  (letrec ([len (vector-length vec)]
	   [f (lambda (p)
		(if (< p len)
		  (let ([pr (vector-ref vec p)])
		    (if (and (pair? pr) (equal? v (car pr)))
		      pr (f (+ p 1))))
		  #f))])
    (f 0)))

;; problem 10
(define (cached-assoc xs n)
  (letrec ([memo (make-vector n #f)]
	   [cpos 0])
    (lambda (v)
      ;(or (let ([cc (vector-assoc v memo)]) (begin (and cc (print "hit!")) cc))
      (or (vector-assoc v memo)
	  (let ([pr (assoc v xs)])
	    (begin 
	      (if (pair? pr)
		(begin 
		  (vector-set! memo cpos pr)
		  (set! cpos (if (= cpos (- n 1)) 0 (+ cpos 1))))
		#t)
	      pr))))))

;; problem 11
(define-syntax while-less
  (syntax-rules (do)
    [(while-less e1 do e2)
     (letrec ([v1 e1]
	      [f (lambda () (if (< e2 v1) (f) #t))])
       (f))]))







